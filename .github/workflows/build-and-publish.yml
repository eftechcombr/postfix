name: Build and Publish

on:
  workflow_dispatch: 
  push:
    branches:
      - "dev"
      - "latest"
  # pull_request:
  #   branches:
  #     - "latest" 

env:
  REGISTRY: "docker.io"
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build-and-publish:

    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write
    #   # This is used to complete the identity challenge
    #   # with sigstore/fulcio when running outside of PRs.
    #   id-token: write


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Install the cosign tool except on PR
      # # https://github.com/sigstore/cosign-installer
      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 #v2.6.0
      #   with:
      #     cosign-release: 'v1.13.1'

        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry 
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          # username: ${{ github.actor }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # password: ${{ secrets.GITHUB_TOKEN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=ref,enable=true,priority=600,prefix=,suffix=,event=branch
            type=raw,value=${{ github.ref_name }}


      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      # # Sign the resulting Docker image digest except on PRs.
      # # This will only write to the public Rekor transparency log when the Docker
      # # repository is public to avoid leaking data.  If you would like to publish
      # # transparency data even for private images, pass --force to cosign below.
      # # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Use the token
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api octocat


      - name: create a repository_dispatch event
        if: ${{ github.ref_name }} == 'dev' 
        env: 
          REPO_DESTINATION: "eftechcombr/iac"
          PATH_DESTINATION: "files/kubernetes/sandbox/postfix"
        run: |
          TOKEN="${{ steps.generate_token.outputs.token }}"
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -d '{ "event_type": "update-repo", "client_payload": { "sha": "${{ github.sha }}", "from": "${{ github.repository}}", "branch": "${{ github.ref_name}}", "destination": "${{ env.PATH_DESTINATION }}" } }' \
          https://api.github.com/repos/${{ env.REPO_DESTINATION }}/dispatches

